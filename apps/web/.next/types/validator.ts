// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../src/app/callback/apple/page.tsx
{
  const handler = {} as typeof import("../../src/app/callback/apple/page.js")
  handler satisfies AppPageConfig<"/callback/apple">
}

// Validate ../../src/app/callback/deezer/page.tsx
{
  const handler = {} as typeof import("../../src/app/callback/deezer/page.js")
  handler satisfies AppPageConfig<"/callback/deezer">
}

// Validate ../../src/app/callback/spotify/page.tsx
{
  const handler = {} as typeof import("../../src/app/callback/spotify/page.js")
  handler satisfies AppPageConfig<"/callback/spotify">
}

// Validate ../../src/app/callback/youtube/page.tsx
{
  const handler = {} as typeof import("../../src/app/callback/youtube/page.js")
  handler satisfies AppPageConfig<"/callback/youtube">
}

// Validate ../../src/app/library/[source]/[target]/albums/page.tsx
{
  const handler = {} as typeof import("../../src/app/library/[source]/[target]/albums/page.js")
  handler satisfies AppPageConfig<"/library/[source]/[target]/albums">
}

// Validate ../../src/app/library/[source]/[target]/liked/page.tsx
{
  const handler = {} as typeof import("../../src/app/library/[source]/[target]/liked/page.js")
  handler satisfies AppPageConfig<"/library/[source]/[target]/liked">
}

// Validate ../../src/app/library/[source]/[target]/page.tsx
{
  const handler = {} as typeof import("../../src/app/library/[source]/[target]/page.js")
  handler satisfies AppPageConfig<"/library/[source]/[target]">
}

// Validate ../../src/app/library/[source]/[target]/playlist/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/library/[source]/[target]/playlist/[id]/page.js")
  handler satisfies AppPageConfig<"/library/[source]/[target]/playlist/[id]">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/source/page.tsx
{
  const handler = {} as typeof import("../../src/app/source/page.js")
  handler satisfies AppPageConfig<"/source">
}

// Validate ../../src/app/api/auth/apple/callback/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/apple/callback/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/apple/callback">
}

// Validate ../../src/app/api/auth/apple/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/apple/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/apple">
}

// Validate ../../src/app/api/auth/spotify/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/spotify/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/spotify">
}

// Validate ../../src/app/api/auth/youtube/callback/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/youtube/callback/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/youtube/callback">
}

// Validate ../../src/app/api/auth/youtube/refresh/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/youtube/refresh/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/youtube/refresh">
}

// Validate ../../src/app/api/deezer/albums/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/deezer/albums/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/deezer/albums/[id]">
}

// Validate ../../src/app/api/deezer/playlists/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/deezer/playlists/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/deezer/playlists/[id]">
}

// Validate ../../src/app/api/deezer/playlists/[id]/tracks/route.ts
{
  const handler = {} as typeof import("../../src/app/api/deezer/playlists/[id]/tracks/route.js")
  handler satisfies RouteHandlerConfig<"/api/deezer/playlists/[id]/tracks">
}

// Validate ../../src/app/api/deezer/user/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/deezer/user/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/deezer/user/[id]">
}

// Validate ../../src/app/api/spotify/refresh/route.ts
{
  const handler = {} as typeof import("../../src/app/api/spotify/refresh/route.js")
  handler satisfies RouteHandlerConfig<"/api/spotify/refresh">
}

// Validate ../../src/app/api/transfer/usage/route.ts
{
  const handler = {} as typeof import("../../src/app/api/transfer/usage/route.js")
  handler satisfies RouteHandlerConfig<"/api/transfer/usage">
}

// Validate ../../src/app/api/user/status/route.ts
{
  const handler = {} as typeof import("../../src/app/api/user/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/user/status">
}

// Validate ../../src/app/api/youtube/music/route.ts
{
  const handler = {} as typeof import("../../src/app/api/youtube/music/route.js")
  handler satisfies RouteHandlerConfig<"/api/youtube/music">
}

// Validate ../../src/app/api/youtube/proxy/route.ts
{
  const handler = {} as typeof import("../../src/app/api/youtube/proxy/route.js")
  handler satisfies RouteHandlerConfig<"/api/youtube/proxy">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../src/app/library/[source]/[target]/layout.tsx
{
  const handler = {} as typeof import("../../src/app/library/[source]/[target]/layout.js")
  handler satisfies LayoutConfig<"/library/[source]/[target]">
}
