{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/web/src/env.mjs"],"sourcesContent":["// Minimal Edge-safe env for use in Edge Runtime (middleware)\n// Do NOT use Zod or any dynamic code evaluation here, as Edge Runtime forbids it.\n// For full validation, see src/env.server.mjs (Node.js/server only).\n\nexport const env = {\n  BASIC_AUTH_USER: process.env.BASIC_AUTH_USER || \"\",\n  BASIC_AUTH_PASSWORD: process.env.BASIC_AUTH_PASSWORD || \"\",\n  NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN || \"\",\n  // Add other public/edge-safe env vars as needed\n};\n\n// Note: This file must remain Edge-compatible. Do not import Zod or any code that uses eval/new Function.\n"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,kFAAkF;AAClF,qEAAqE;;;;;AAE9D,MAAM,MAAM;IACjB,iBAAiB,QAAQ,GAAG,CAAC,eAAe,IAAI;IAChD,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IACxD,wBAAwB,uIAAsC;AAEhE,GAEA,0GAA0G"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/web/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { env } from \"./env.mjs\";\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest): NextResponse {\n  // Get the basic auth credentials from the request\n  const basicAuth = request.headers.get(\"authorization\");\n\n  if (basicAuth) {\n    const authValue = basicAuth.split(\" \")[1];\n    const [user, pwd] = atob(authValue).split(\":\");\n\n    // Check if the credentials match\n    if (user === env.BASIC_AUTH_USER && pwd === env.BASIC_AUTH_PASSWORD) {\n      return NextResponse.next();\n    }\n  }\n\n  // If no credentials or invalid credentials, return 401\n  return new NextResponse(\"Authentication required\", {\n    status: 401,\n    headers: {\n      \"WWW-Authenticate\": 'Basic realm=\"Secure Area\"',\n    },\n  });\n}\n\n// Configure which routes to protect\nexport const config = {\n  matcher: [\n    /*\n     * Exclude the Sentry tunnel route from middleware to avoid conflicts.\n     * This must come before other exclusions to ensure Sentry requests are not blocked.\n     */\n    \"/((?!sentry-tunnel|api|_next/static|_next/image|favicon\\\\.ico|manifest\\\\.json|favicons/).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAGO,SAAS,WAAW,OAAoB;IAC7C,kDAAkD;IAClD,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEtC,IAAI,WAAW;QACb,MAAM,YAAY,UAAU,KAAK,CAAC,IAAI,CAAC,EAAE;QACzC,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,WAAW,KAAK,CAAC;QAE1C,iCAAiC;QACjC,IAAI,SAAS,yIAAG,CAAC,eAAe,IAAI,QAAQ,yIAAG,CAAC,mBAAmB,EAAE;YACnE,OAAO,+YAAY,CAAC,IAAI;QAC1B;IACF;IAEA,uDAAuD;IACvD,OAAO,IAAI,+YAAY,CAAC,2BAA2B;QACjD,QAAQ;QACR,SAAS;YACP,oBAAoB;QACtB;IACF;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;KAGC,GACD;KACD;AACH"}}]
}