{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/tcosentino/projects/nonna.fm/apps/web/src/contexts/ThemeContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  // Initialize theme state based on class presence to avoid hydration mismatch\n  const [theme, setTheme] = useState<Theme>(() => {\n    // During SSR, default to light to match the initial state\n    if (typeof window === \"undefined\") return \"light\";\n    // On client, check if dark class is present (set by our script)\n    return document.documentElement.classList.contains(\"dark\") ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    // Sync theme state with localStorage and system preference\n    const storedTheme = localStorage.getItem(\"theme\") as Theme;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n    if (storedTheme) {\n      setTheme(storedTheme);\n      document.documentElement.classList.toggle(\"dark\", storedTheme === \"dark\");\n    } else if (prefersDark) {\n      setTheme(\"dark\");\n      document.documentElement.classList.add(\"dark\");\n    }\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const handleChange = (e: MediaQueryListEvent): void => {\n      const newTheme = e.matches ? \"dark\" : \"light\";\n      if (!localStorage.getItem(\"theme\")) {\n        setTheme(newTheme);\n        document.documentElement.classList.toggle(\"dark\", e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, []);\n\n  const toggleTheme = (): void => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>;\n}\n\nexport function useTheme(): ThemeContextType {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AAFA;;;AAWA,MAAM,6BAAe,IAAA,qaAAa,EAA+B;AAE1D,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,6EAA6E;IAC7E,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,gaAAQ,EAAQ;QACxC,0DAA0D;QAC1D,wCAAmC,OAAO;;;IAG5C;IAEA,IAAA,iaAAS,EAAC;QACR,2DAA2D;QAC3D,MAAM,cAAc,aAAa,OAAO,CAAC;QACzC,MAAM,cAAc,OAAO,UAAU,CAAC,gCAAgC,OAAO;QAE7E,IAAI,aAAa;YACf,SAAS;YACT,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,gBAAgB;QACpE,OAAO,IAAI,aAAa;YACtB,SAAS;YACT,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;QACzC;QAEA,kCAAkC;QAClC,MAAM,aAAa,OAAO,UAAU,CAAC;QACrC,MAAM,eAAe,CAAC;YACpB,MAAM,WAAW,EAAE,OAAO,GAAG,SAAS;YACtC,IAAI,CAAC,aAAa,OAAO,CAAC,UAAU;gBAClC,SAAS;gBACT,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO;YAC7D;QACF;QAEA,WAAW,gBAAgB,CAAC,UAAU;QACtC,OAAO,IAAM,WAAW,mBAAmB,CAAC,UAAU;IACxD,GAAG,EAAE;IAEL,MAAM,cAAc;QAClB,MAAM,WAAW,UAAU,UAAU,SAAS;QAC9C,SAAS;QACT,aAAa,OAAO,CAAC,SAAS;QAC9B,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,aAAa;IACjE;IAEA,qBAAO,6bAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO;QAAY;kBAAI;;;;;;AAChE;AAEO,SAAS;IACd,MAAM,UAAU,IAAA,kaAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}