{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///Users/tcosentino/projects/nonna.fm/apps/web/src/lib/constants.ts"],"sourcesContent":["// Constants shared between client and server components\n\n// Daily transfer limit for free users\nexport const FREE_TIER_LIMIT = 500;\nexport const PREMIUM_TIER_LIMIT = 5000;\n"],"names":[],"mappings":"AAAA,wDAAwD;AAExD,sCAAsC;;;;;;;AAC/B,MAAM,kBAAkB;AACxB,MAAM,qBAAqB","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/tcosentino/projects/nonna.fm/apps/web/src/lib/redis.ts"],"sourcesContent":["import { createClient } from \"redis\";\n// WARNING: This module contains server-only code and should NEVER be imported in client components\nimport { FREE_TIER_LIMIT, PREMIUM_TIER_LIMIT } from \"./constants\";\n\n// Initialize Redis client with environmental URL\nexport const redis = createClient({\n  url: process.env.REDIS_URL || \"\",\n});\n\n// Add error handling\nredis.on(\"error\", err => {\n  console.error(\"Redis Client Error:\", err);\n});\n\n// Connect to Redis only when needed (lazy initialization)\nasync function getRedisClient(): Promise<typeof redis> {\n  try {\n    if (!redis.isOpen) {\n      await redis.connect();\n    }\n    return redis;\n  } catch (error) {\n    console.error(\"Failed to connect to Redis:\", error);\n    throw error;\n  }\n}\n\n// Get current environment to prefix keys\nconst getEnvPrefix = (): string => {\n  const env = process.env.NODE_ENV || \"development\";\n  return `${env}:`;\n};\n\n// Helper to create prefixed keys\nexport const createKey = (key: string): string => {\n  return `${getEnvPrefix()}${key}`;\n};\n\n// Usage tracking keys and functions\nexport const createUsageKey = (platformIdHash: string): string => {\n  return createKey(`usage:${platformIdHash}`);\n};\n\n// Re-export the constant for backward compatibility\nexport { FREE_TIER_LIMIT, PREMIUM_TIER_LIMIT };\n\n// Helper to get and increment usage, ensuring proper TTL setting\nexport async function incrementUsage(usageKey: string, count: number = 1): Promise<number> {\n  const client = await getRedisClient();\n\n  // Get the current value\n  const currentValue = await client.get(usageKey);\n  const newValue = parseInt(currentValue || \"0\", 10) + count;\n\n  // Set the new value with TTL (24 hours)\n  await client.set(usageKey, newValue.toString(), {\n    EX: 86400, // 24 hours in seconds\n  });\n\n  return newValue;\n}\n\n// Helper to get usage count and TTL\nexport interface UsageInfo {\n  usage: number;\n  ttl: number;\n}\n\nexport async function getUsage(usageKey: string): Promise<UsageInfo> {\n  const client = await getRedisClient();\n  const [value, ttl] = await Promise.all([client.get(usageKey), client.ttl(usageKey)]);\n  return {\n    usage: parseInt(value || \"0\", 10),\n    ttl: ttl,\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA,mGAAmG;AACnG;;;AAGO,MAAM,QAAQ,IAAA,mHAAY,EAAC;IAChC,KAAK,QAAQ,GAAG,CAAC,SAAS,IAAI;AAChC;AAEA,qBAAqB;AACrB,MAAM,EAAE,CAAC,SAAS,CAAA;IAChB,QAAQ,KAAK,CAAC,uBAAuB;AACvC;AAEA,0DAA0D;AAC1D,eAAe;IACb,IAAI;QACF,IAAI,CAAC,MAAM,MAAM,EAAE;YACjB,MAAM,MAAM,OAAO;QACrB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF;AAEA,yCAAyC;AACzC,MAAM,eAAe;IACnB,MAAM,MAAM,mDAAwB;IACpC,OAAO,GAAG,IAAI,CAAC,CAAC;AAClB;AAGO,MAAM,YAAY,CAAC;IACxB,OAAO,GAAG,iBAAiB,KAAK;AAClC;AAGO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,UAAU,CAAC,MAAM,EAAE,gBAAgB;AAC5C;;AAMO,eAAe,eAAe,QAAgB,EAAE,QAAgB,CAAC;IACtE,MAAM,SAAS,MAAM;IAErB,wBAAwB;IACxB,MAAM,eAAe,MAAM,OAAO,GAAG,CAAC;IACtC,MAAM,WAAW,SAAS,gBAAgB,KAAK,MAAM;IAErD,wCAAwC;IACxC,MAAM,OAAO,GAAG,CAAC,UAAU,SAAS,QAAQ,IAAI;QAC9C,IAAI;IACN;IAEA,OAAO;AACT;AAQO,eAAe,SAAS,QAAgB;IAC7C,MAAM,SAAS,MAAM;IACrB,MAAM,CAAC,OAAO,IAAI,GAAG,MAAM,QAAQ,GAAG,CAAC;QAAC,OAAO,GAAG,CAAC;QAAW,OAAO,GAAG,CAAC;KAAU;IACnF,OAAO;QACL,OAAO,SAAS,SAAS,KAAK;QAC9B,KAAK;IACP;AACF","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/tcosentino/projects/nonna.fm/apps/web/src/app/api/user/status/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { createUsageKey, getUsage } from \"@/lib/redis\";\nimport crypto from \"crypto\";\n\n// Helper to hash platform user IDs\nconst hashPlatformId = (platformId: string): string => {\n  return crypto.createHash(\"sha256\").update(platformId).digest(\"hex\");\n};\n\n// Get the platform user ID from the request header\nconst getPlatformUserId = async (req: Request): Promise<string> => {\n  const userId = req.headers.get(\"x-user-id\");\n  if (!userId) {\n    throw new Error(\"No user ID provided\");\n  }\n  return userId;\n};\n\nexport async function GET(req: Request): Promise<NextResponse> {\n  try {\n    // Get platform user ID\n    const platformUserId = await getPlatformUserId(req);\n    const platformIdHash = hashPlatformId(platformUserId);\n\n    // Create Redis key\n    const usageKey = createUsageKey(platformIdHash);\n\n    // Get current usage and TTL\n    const { usage: currentUsage, ttl } = await getUsage(usageKey);\n\n    // For now, hardcode isPremium to false\n    const isPremium = false;\n\n    return NextResponse.json({\n      isPremium,\n      currentUsage,\n      resetInSeconds: ttl,\n    });\n  } catch (error) {\n    console.error(\"Error getting user status:\", error);\n    return NextResponse.json({ error: \"Failed to get usage status\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,mCAAmC;AACnC,MAAM,iBAAiB,CAAC;IACtB,OAAO,gHAAM,CAAC,UAAU,CAAC,UAAU,MAAM,CAAC,YAAY,MAAM,CAAC;AAC/D;AAEA,mDAAmD;AACnD,MAAM,oBAAoB,OAAO;IAC/B,MAAM,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC;IAC/B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,uBAAuB;QACvB,MAAM,iBAAiB,MAAM,kBAAkB;QAC/C,MAAM,iBAAiB,eAAe;QAEtC,mBAAmB;QACnB,MAAM,WAAW,IAAA,sKAAc,EAAC;QAEhC,4BAA4B;QAC5B,MAAM,EAAE,OAAO,YAAY,EAAE,GAAG,EAAE,GAAG,MAAM,IAAA,gKAAQ,EAAC;QAEpD,uCAAuC;QACvC,MAAM,YAAY;QAElB,OAAO,+VAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA,gBAAgB;QAClB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,+VAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA6B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACF","debugId":null}}]
}